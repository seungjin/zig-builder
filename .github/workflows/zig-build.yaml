name: Zig Builder
on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 */8 * * *"
env:
  llvmVer: 15
jobs:
  Zig-Latest-Build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - run: sudo apt-get update -y
      - run: sudo apt-get install -y ca-certificates apt-utils lsb-release
      - name: Copy llvm source list
        run: |
          sudo cp ${{ github.workspace }}/llvm.source.list /etc/apt/sources.list.d/llvm.source.list
      - run: sudo apt-get update -y
      - run: sudo apt-get dist-upgrade -y
      - run: sudo apt install -y git build-essential cmake llvm-$llvmVer llvm-$llvmVer-dev lld lld-$llvmVer liblld-$llvmVer-dev clang-$llvmVer libclang-$llvmVer-dev zlib1g-dev
      - uses: actions/checkout@master
        with:
          repository: ziglang/zig
          path: zig
          ref: master
      - name: zig git hash
        run: echo ::set-output name=GIT_HASH::$(git rev-parse --short=9 HEAD)
        working-directory: ${{ github.workspace }}/zig/
        id: zig_source
      - name: Check source logs since 8 hours ago
        run: echo ::set-output name=NEW_CODE::$(git log --pretty=oneline --since "$(date -d '12 hour ago' "+%Y-%m-%d %H:%M:%S")" | wc -l)
        id: zig_check_code
      - name: Check new source exist
        run: echo zig_check_code.outputs.NEW_CODE
      #- name: Stop if there is no code change
      #  if: zig_check_code.outputs.NEW_CODE < 1
      #
      - name: Make build directory under zig
        run: mkdir ${{ github.workspace }}/zig/build
      - name: Run cmake
        working-directory: ${{ github.workspace }}/zig/build
        run: cmake ..
      - name: Creating swapfile / Use swap
        run: |
          sudo fallocate -l 4GB /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
      - name: Make install
        working-directory: ${{ github.workspace }}/zig/build
        run: make install
      - name: Get built zig version
        run: |
          echo ::set-output name=ZIG_VER::$(${{ github.workspace }}/zig/build/stage3/bin/zig version)
          echo ::set-output name=RELEASE::zig-$(${{ github.workspace }}/zig/build/stage3/bin/zig version)-dev.${{ github.run_number }}+${{ steps.zig_source.outputs.GIT_HASH}}
        id: zig_ver
      - name: Make zig release directory
        run: mkdir -p ${{ github.workspace }}/${{ steps.zig_ver.outputs.RELEASE }}
      - name: Copy results into release directory (bin)
        run: cp -pr ${{ github.workspace }}/zig/build/stage3/bin ${{ github.workspace }}/${{ steps.zig_ver.outputs.RELEASE }}/
      - name: Copy results into release directory (lib)
        run: cp -pr ${{ github.workspace }}/zig/build/stage3/lib/zig/ ${{ github.workspace }}/${{ steps.zig_ver.outputs.RELEASE }}/lib/
      - name: tar/gz outcomes
        run: tar -czvf ${{ steps.zig_ver.outputs.RELEASE }}.tar.gz ${{ github.workspace }}/${{ steps.zig_ver.outputs.RELEASE }}
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: ${{ steps.zig_ver.outputs.RELEASE }}.tar.gz
          path: ${{ github.workspace }}/${{ steps.zig_ver.outputs.RELEASE }}.tar.gz
      - name: Create Release
        uses: ncipollo/release-action@v1.10.0
        id: create_release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release ${{ steps.zig_ver.outputs.RELEASE }}
          tag: ${{ steps.zig_ver.outputs.RELEASE }}
          artifacts: ${{ github.workspace }}/${{ steps.zig_ver.outputs.RELEASE }}.tar.gz
          artifactContentType: "application/gzip"
          draft: false
          prerelease: false
