name: Zig Builder
on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 */8 * * *"
env:
  llvmVer: 15
jobs:
  Zig-Latest-Build:
    runs-on: ubuntu-22.04
    steps:
      - name: Creating swapfile / Use swap
        run: |
          sudo fallocate -l 4GB /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
      - uses: actions/checkout@v2.4.2
      - run: sudo apt-get update -y
      - run: sudo apt-get install -y ca-certificates apt-utils lsb-release
      - name: Copy llvm source list
        run: |
          sudo cp ${{ github.workspace }}/llvm.source.list /etc/apt/sources.list.d/llvm.source.list
      - run: sudo apt-get update -y
      - run: sudo apt-get dist-upgrade -y
      - run: sudo apt install -y git build-essential cmake llvm-$llvmVer llvm-$llvmVer-dev lld lld-$llvmVer liblld-$llvmVer-dev clang-$llvmVer libclang-$llvmVer-dev zlib1g-dev
      - uses: actions/checkout@v2.4.2
        with:
          repository: ziglang/zig
          path: zig
          ref: master
          fetch-depth: "0"
      - name: Check source logs since 8 hours ago
        run: echo ::set-output name=NEW_CODE::$(git log --pretty=oneline --since "$(date -d '8 hour ago' "+%Y-%m-%d %H:%M:%S")" | wc -l)
        id: zig_check_code
      - name: Stop if there is no code change
        if: steps.zig_check_code.outputs.NEW_CODE < 1
        run: exit 0
      - name: Make build directory under zig
        run: mkdir ${{ github.workspace }}/zig/build
      - name: Run cmake
        run: cmake -S ${{ github.workspace }}/zig -B ${{ github.workspace }}/zig/build
      - name: Get zig version
        working-directory: ${{ github.workspace }}
        run: echo ::set-output name=TAG::$(cat ${{ github.workspace }}/zig/build/config.h | grep VERSION_STRING | cut -d' ' -f3 | tr -d '"')
        id: zig_ver_check
      - name: foo0
        working-directory: ${{ github.workspace }}
        run: echo ::set-output name=EXIST::$(git tag -l zig-${{ steps.zig_ver_check.outputs.TAG }} | wc -l)
        id: build_tag_check
      - name: ncipo
        run: echo ${{ steps.build_tag_check.outputs.EXIST }}
      - name: foo
        if: steps.build_tag_check.outputs.EXIST > 0
        run: exit 0
      - name: Make install
        working-directory: ${{ github.workspace }}/zig/build
        run: make install
      - name: Get built zig version
        run: |
          echo ::set-output name=ZIG_VER::$(${{ github.workspace }}/zig/build/stage3/bin/zig version)
        id: zig_ver
      - name: Make zig release directory
        run: mkdir -p ${{ github.workspace }}/zig-${{ steps.zig_ver.outputs.ZIG_VER }}
      - name: Copy resulzig_ver_checkts into release directory (bin)
        run: cp -pr ${{ github.workspace }}/zig/build/stage3/bin ${{ github.workspace }}/zig-${{ steps.zig_ver.outputs.ZIG_VER }}/
      - name: Copy results into release directory (lib)
        run: cp -pr ${{ github.workspace }}/zig/build/stage3/lib/zig/ ${{ github.workspace }}/zig-${{ steps.zig_ver.outputs.ZIG_VER }}/lib/
      - name: tar/gz outcomes
        run: tar -czvf zig-${{ steps.zig_ver.outputs.ZIG_VER }}.tar.gz ./zig-${{ steps.zig_ver.outputs.ZIG_VER }}
        working-directory: ${{ github.workspace }}
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: zig-${{ steps.zig_ver.outputs.ZIG_VER }}.tar.gz
          path: ${{ github.workspace }}/zig-${{ steps.zig_ver.outputs.ZIG_VER }}.tar.gz
      - name: Create Release
        uses: ncipollo/release-action@v1.10.0
        id: create_release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release zig-${{ steps.zig_ver.outputs.ZIG_VER }}
          tag: zig-${{ steps.zig_ver.outputs.ZIG_VER }}
          artifacts: ${{ github.workspace }}/zig-${{ steps.zig_ver.outputs.ZIG_VER }}.tar.gz
          artifactContentType: "application/gzip"
          draft: false
          prerelease: false
